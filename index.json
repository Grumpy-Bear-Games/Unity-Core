{
  "api/Games.GrumpyBear.Core.Editor.AssetUtility.html": {
    "href": "api/Games.GrumpyBear.Core.Editor.AssetUtility.html",
    "title": "Class AssetUtility | Games.GrumpyBear.Core",
    "keywords": "Class AssetUtility Inheritance Object AssetUtility Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Games.GrumpyBear.Core.Editor Assembly : Games.GrumpyBear.Core.Editor.dll Syntax public static class AssetUtility Methods RenameAsset(Object, String) Declaration public static void RenameAsset(Object obj, string newName) Parameters Type Name Description Object obj String newName"
  },
  "api/Games.GrumpyBear.Core.Editor.html": {
    "href": "api/Games.GrumpyBear.Core.Editor.html",
    "title": "Namespace Games.GrumpyBear.Core.Editor | Games.GrumpyBear.Core",
    "keywords": "Namespace Games.GrumpyBear.Core.Editor Classes AssetUtility"
  },
  "api/Games.GrumpyBear.Core.Editor.LevelManagement.ExtensionMethods.html": {
    "href": "api/Games.GrumpyBear.Core.Editor.LevelManagement.ExtensionMethods.html",
    "title": "Class ExtensionMethods | Games.GrumpyBear.Core",
    "keywords": "Class ExtensionMethods Inheritance Object ExtensionMethods Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Games.GrumpyBear.Core.Editor.LevelManagement Assembly : Games.GrumpyBear.Core.Editor.dll Syntax public static class ExtensionMethods Methods AddToBuild(SceneReference) Declaration public static void AddToBuild(this SceneReference sceneReference) Parameters Type Name Description SceneReference sceneReference AllScenesInBuild(SceneGroup) Declaration public static bool AllScenesInBuild(this SceneGroup sceneGroup) Parameters Type Name Description SceneGroup sceneGroup Returns Type Description Boolean AllScenesInBuild(SceneManager) Declaration public static bool AllScenesInBuild(this SceneManager sceneManager) Parameters Type Name Description SceneManager sceneManager Returns Type Description Boolean IsEmpty(SceneReference) Declaration public static bool IsEmpty(this SceneReference sceneReference) Parameters Type Name Description SceneReference sceneReference Returns Type Description Boolean IsInBuild(SceneReference) Declaration public static bool IsInBuild(this SceneReference sceneReference) Parameters Type Name Description SceneReference sceneReference Returns Type Description Boolean IsValidScene(SceneReference) Declaration public static bool IsValidScene(this SceneReference sceneReference) Parameters Type Name Description SceneReference sceneReference Returns Type Description Boolean LoadInEditor(SceneGroup) Declaration public static void LoadInEditor(this SceneGroup sceneGroup) Parameters Type Name Description SceneGroup sceneGroup Validate(SceneReference) Declaration public static ExtensionMethods.SceneReferenceStatus Validate(this SceneReference sceneReference) Parameters Type Name Description SceneReference sceneReference Returns Type Description ExtensionMethods.SceneReferenceStatus"
  },
  "api/Games.GrumpyBear.Core.Editor.LevelManagement.ExtensionMethods.SceneReferenceStatus.html": {
    "href": "api/Games.GrumpyBear.Core.Editor.LevelManagement.ExtensionMethods.SceneReferenceStatus.html",
    "title": "Enum ExtensionMethods.SceneReferenceStatus | Games.GrumpyBear.Core",
    "keywords": "Enum ExtensionMethods.SceneReferenceStatus Namespace : Games.GrumpyBear.Core.Editor.LevelManagement Assembly : Games.GrumpyBear.Core.Editor.dll Syntax public enum SceneReferenceStatus Fields Name Description InvalidScenePath NoSceneSelected SceneMissingFromBuild Valid"
  },
  "api/Games.GrumpyBear.Core.Editor.LevelManagement.html": {
    "href": "api/Games.GrumpyBear.Core.Editor.LevelManagement.html",
    "title": "Namespace Games.GrumpyBear.Core.Editor.LevelManagement | Games.GrumpyBear.Core",
    "keywords": "Namespace Games.GrumpyBear.Core.Editor.LevelManagement Classes ExtensionMethods Enums ExtensionMethods.SceneReferenceStatus"
  },
  "api/Games.GrumpyBear.Core.Events.EventT-1.html": {
    "href": "api/Games.GrumpyBear.Core.Events.EventT-1.html",
    "title": "Class EventT<T> | Games.GrumpyBear.Core",
    "keywords": "Class EventT<T> A generic reference-able event with a event payload used to propagate data among components in a Pub-Sub fashion without neither producers nor consumers knowing about each other. This is similar to VoidEvent but with an event payload. Because instances of EventT<T> are ScriptableObjects they can be referenced in serialized fields and UnityEvents . Inheritance Object EventT<T> Namespace : Games.GrumpyBear.Core.Events Assembly : Games.GrumpyBear.Core.dll Syntax public class EventT<T> : ScriptableObject Type Parameters Name Description T Type of the payload being passed from producers to consumers Remarks Because Unity can't instantiate generics directly, you must override the class type. [CreateAssetMenu(menuName = \"Integer Event\", fileName = \"Integer Event\")] public class IntEvent: EventT<t> {} Examples Imagine you have a player health component and a UI components, which spawns a small floating popup every time the player loses health. Using EventT<T> we can have the health component broadcast the damage amount to the UI components without any of them knowing about or depending on each other. public class PlayerHealth: MonoBehaviour { [SerializeField] private EventT<int> _onDamage; public void DamagePlayer(int damage) { /* Update player health */ _onDamage.Invoke(damage); } } public class DamagePopupUI: MonoBehaviour { [SerializeField] private EventT<int> _onDamage; private void OnEnable() => _onDamage.Listeners += OnDamage; private void OnDisable() => _onDamage.Listeners -= OnDamage; private void OnDamage(int damage) { /* Spawn floating popup showing the player damage for a few seconds */ } } Methods Invoke(T) Producers can trigger the event by calling this method and providing the event payload. Declaration public void Invoke(T value) Parameters Type Name Description T value The event payload Events Listeners Subscribers to the event should add themselves to this delegate. Declaration public event Action<T> Listeners Event Type Type Description Action <T> Remarks Remember to unsubscribe for the event before destroying your listener. In a MonoBehaviour component, this is often done in OnDisable or OnDestroy See Also VoidEvent EventTListener <T>"
  },
  "api/Games.GrumpyBear.Core.Events.EventTListener-1.html": {
    "href": "api/Games.GrumpyBear.Core.Events.EventTListener-1.html",
    "title": "Class EventTListener<T> | Games.GrumpyBear.Core",
    "keywords": "Class EventTListener<T> Companion helper class to EventT<T> to call methods on other component, when the event trigger. The event payload can be provided to these methods as a parameter. This is similar to VoidEventListener but with an event payload. Inheritance Object EventTListener<T> Namespace : Games.GrumpyBear.Core.Events Assembly : Games.GrumpyBear.Core.dll Syntax public class EventTListener<T> : MonoBehaviour Type Parameters Name Description T The event payload type Remarks Because Unity can't instantiate generics directly, you must override the class type. public class IntEventListener: EventTListener<t> {} Fields _event The EventT<T> which this component should subscribe to. Declaration protected EventT<T> _event Field Value Type Description EventT <T> _onTrigger The UnityEvent<T> which gets invoked, when this component receives an event. The event payload is passed to UnityEvent<T>.Invoke() . Declaration protected UnityEvent<T> _onTrigger Field Value Type Description UnityEvent <T> See Also EventT <T>"
  },
  "api/Games.GrumpyBear.Core.Events.html": {
    "href": "api/Games.GrumpyBear.Core.Events.html",
    "title": "Namespace Games.GrumpyBear.Core.Events | Games.GrumpyBear.Core",
    "keywords": "Namespace Games.GrumpyBear.Core.Events Classes EventT<T> A generic reference-able event with a event payload used to propagate data among components in a Pub-Sub fashion without neither producers nor consumers knowing about each other. This is similar to VoidEvent but with an event payload. Because instances of EventT<T> are ScriptableObjects they can be referenced in serialized fields and UnityEvents . EventTListener<T> Companion helper class to EventT<T> to call methods on other component, when the event trigger. The event payload can be provided to these methods as a parameter. This is similar to VoidEventListener but with an event payload. VoidEvent A generic reference-able event used to send signals between components in a Pub-Sub fashion without neither invoker nor listener knowing about each other. This is similar to EventT<T> but without an event payload. Because instances of VoidEvent are ScriptableObjects they can be referenced in serialized fields and UnityEvents . VoidEventListener Companion helper class to VoidEvent to call methods on other component, when the event trigger. This is similar to EventTListener<T> but without an event payload."
  },
  "api/Games.GrumpyBear.Core.Events.VoidEvent.html": {
    "href": "api/Games.GrumpyBear.Core.Events.VoidEvent.html",
    "title": "Class VoidEvent | Games.GrumpyBear.Core",
    "keywords": "Class VoidEvent A generic reference-able event used to send signals between components in a Pub-Sub fashion without neither invoker nor listener knowing about each other. This is similar to EventT<T> but without an event payload. Because instances of VoidEvent are ScriptableObjects they can be referenced in serialized fields and UnityEvents . Inheritance Object VoidEvent Namespace : Games.GrumpyBear.Core.Events Assembly : Games.GrumpyBear.Core.dll Syntax public class VoidEvent : ScriptableObject Examples Imagine you have a player health component and a UI components, which shows a Game Over screen when the player dies. Using VoidEvent we can have the health component broadcast when the player dies to the UI components without any of them knowing about or depending on each other. public class PlayerHealth: MonoBehaviour { [SerializeField] private VoidEvent _onPlayerDied; private int _health; public void DamagePlayer(int damage) { /* Update player health */ if (_health <= 0) { _onPlayerDies.Invoke(); } } } public class GameOverUI: MonoBehaviour { [SerializeField] private VoidEvent _onPlayerDied; private void OnEnable() => _onPlayerDied.Listeners += OnPlayerDied; private void OnDisable() => _onPlayerDied.Listeners -= OnPlayerDied; private void OnPlayerDied() { /* Show Game Over screen */ } } Methods Invoke() Invokers can trigger the event by calling this method. Declaration public void Invoke() Events Listeners Subscribers to the event should add themselves to this delegate. Declaration public event Action Listeners Event Type Type Description Action Remarks Remember to unsubscribe for the event before destroying your listener. In a MonoBehaviour component, this is often done in OnDisable or OnDestroy See Also EventT <T> VoidEventListener"
  },
  "api/Games.GrumpyBear.Core.Events.VoidEventListener.html": {
    "href": "api/Games.GrumpyBear.Core.Events.VoidEventListener.html",
    "title": "Class VoidEventListener | Games.GrumpyBear.Core",
    "keywords": "Class VoidEventListener Companion helper class to VoidEvent to call methods on other component, when the event trigger. This is similar to EventTListener<T> but without an event payload. Inheritance Object VoidEventListener Namespace : Games.GrumpyBear.Core.Events Assembly : Games.GrumpyBear.Core.dll Syntax public class VoidEventListener : MonoBehaviour Fields _event The VoidEvent which this component should subscribe to. Declaration protected VoidEvent _event Field Value Type Description VoidEvent _onTrigger The UnityEvent which gets invoked, when this component receives an event. Declaration protected UnityEvent _onTrigger Field Value Type Description UnityEvent See Also VoidEvent"
  },
  "api/Games.GrumpyBear.Core.ExtensionMethods.html": {
    "href": "api/Games.GrumpyBear.Core.ExtensionMethods.html",
    "title": "Class ExtensionMethods | Games.GrumpyBear.Core",
    "keywords": "Class ExtensionMethods Inheritance Object ExtensionMethods Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Games.GrumpyBear.Core Assembly : Games.GrumpyBear.Core.dll Syntax public static class ExtensionMethods Methods Approximate(Single, Single) Declaration public static bool Approximate(this float value, float compareTo) Parameters Type Name Description Single value Single compareTo Returns Type Description Boolean BezierCurve(LineRenderer, Vector2, Vector2, Vector2, Vector2) Declaration public static void BezierCurve(this LineRenderer lineRenderer, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters Type Name Description LineRenderer lineRenderer Vector2 a Vector2 b Vector2 c Vector2 d BezierCurve(LineRenderer, Vector3, Vector3, Vector3, Vector3) Declaration public static void BezierCurve(this LineRenderer lineRenderer, Vector3 a, Vector3 b, Vector3 c, Vector3 d) Parameters Type Name Description LineRenderer lineRenderer Vector3 a Vector3 b Vector3 c Vector3 d Copy(Rect) Declaration public static Rect Copy(this Rect rect) Parameters Type Name Description Rect rect Returns Type Description Rect CubicCurve(Vector2, Vector2, Vector2, Vector2, Single) Declaration public static Vector2 CubicCurve(Vector2 a, Vector2 b, Vector2 c, Vector2 d, float t) Parameters Type Name Description Vector2 a Vector2 b Vector2 c Vector2 d Single t Returns Type Description Vector2 CubicCurve(Vector3, Vector3, Vector3, Vector3, Single) Declaration public static Vector3 CubicCurve(Vector3 a, Vector3 b, Vector3 c, Vector3 d, float t) Parameters Type Name Description Vector3 a Vector3 b Vector3 c Vector3 d Single t Returns Type Description Vector3 DestroyAllChildren(Transform) Declaration public static void DestroyAllChildren(this Transform transform) Parameters Type Name Description Transform transform DestroyAllChildren<T>(Transform) Declaration public static void DestroyAllChildren<T>(this Transform transform) where T : MonoBehaviour Parameters Type Name Description Transform transform Type Parameters Name Description T DestroyAllChildrenImmediate(Transform) Declaration public static void DestroyAllChildrenImmediate(this Transform transform) Parameters Type Name Description Transform transform DestroyAllChildrenImmediate<T>(Transform) Declaration public static void DestroyAllChildrenImmediate<T>(this Transform transform) where T : MonoBehaviour Parameters Type Name Description Transform transform Type Parameters Name Description T IsZero(Single) Declaration public static bool IsZero(this float value) Parameters Type Name Description Single value Returns Type Description Boolean Lerp(Vector2, Vector2, Single) Declaration public static Vector2 Lerp(Vector2 a, Vector2 b, float t) Parameters Type Name Description Vector2 a Vector2 b Single t Returns Type Description Vector2 Lerp(Vector3, Vector3, Single) Declaration public static Vector3 Lerp(Vector3 a, Vector3 b, float t) Parameters Type Name Description Vector3 a Vector3 b Single t Returns Type Description Vector3 PickRandom<T>(IReadOnlyList<T>) Declaration public static T PickRandom<T>(this IReadOnlyList<T> objects) Parameters Type Name Description IReadOnlyList <T> objects Returns Type Description T Type Parameters Name Description T QuadraticCurve(Vector2, Vector2, Vector2, Single) Declaration public static Vector2 QuadraticCurve(Vector2 a, Vector2 b, Vector2 c, float t) Parameters Type Name Description Vector2 a Vector2 b Vector2 c Single t Returns Type Description Vector2 QuadraticCurve(Vector3, Vector3, Vector3, Single) Declaration public static Vector3 QuadraticCurve(Vector3 a, Vector3 b, Vector3 c, float t) Parameters Type Name Description Vector3 a Vector3 b Vector3 c Single t Returns Type Description Vector3 SetMargin(Rect, Single, Single, Single, Single) Declaration public static Rect SetMargin(this Rect rect, float top = 0F, float bottom = 0F, float left = 0F, float right = 0F) Parameters Type Name Description Rect rect Single top Single bottom Single left Single right Returns Type Description Rect SetWidth(Rect, Single) Declaration public static Rect SetWidth(this Rect rect, float width) Parameters Type Name Description Rect rect Single width Returns Type Description Rect Swap<T>(ref T, ref T) Declaration public static void Swap<T>(ref T a, ref T b) Parameters Type Name Description T a T b Type Parameters Name Description T WithMargin(Rect, Single, Single, Single, Single) Declaration public static Rect WithMargin(this Rect rect, float top = 0F, float bottom = 0F, float left = 0F, float right = 0F) Parameters Type Name Description Rect rect Single top Single bottom Single left Single right Returns Type Description Rect WithWidth(Rect, Single) Declaration public static Rect WithWidth(this Rect rect, float width) Parameters Type Name Description Rect rect Single width Returns Type Description Rect"
  },
  "api/Games.GrumpyBear.Core.html": {
    "href": "api/Games.GrumpyBear.Core.html",
    "title": "Namespace Games.GrumpyBear.Core | Games.GrumpyBear.Core",
    "keywords": "Namespace Games.GrumpyBear.Core Classes ExtensionMethods"
  },
  "api/Games.GrumpyBear.Core.LevelManagement.html": {
    "href": "api/Games.GrumpyBear.Core.LevelManagement.html",
    "title": "Namespace Games.GrumpyBear.Core.LevelManagement | Games.GrumpyBear.Core",
    "keywords": "Namespace Games.GrumpyBear.Core.LevelManagement Classes SceneGroup SceneGroupColdStartInitializer SceneLoader SceneManager SceneManagerListener SceneReference"
  },
  "api/Games.GrumpyBear.Core.LevelManagement.SceneGroup.html": {
    "href": "api/Games.GrumpyBear.Core.LevelManagement.SceneGroup.html",
    "title": "Class SceneGroup | Games.GrumpyBear.Core",
    "keywords": "Class SceneGroup Inheritance Object SceneGroup Namespace : Games.GrumpyBear.Core.LevelManagement Assembly : Games.GrumpyBear.Core.dll Syntax public class SceneGroup : SerializableScriptableObject<SceneGroup> Properties ActiveScene Declaration public SceneReference ActiveScene { get; } Property Value Type Description SceneReference Manager Declaration public SceneManager Manager { get; } Property Value Type Description SceneManager Scenes Declaration public IReadOnlyList<SceneReference> Scenes { get; } Property Value Type Description IReadOnlyList < SceneReference > Methods ContainsScene(Scene) Declaration public bool ContainsScene(Scene scene) Parameters Type Name Description Scene scene Returns Type Description Boolean Load() Declaration public void Load() Load_CO() Declaration public IEnumerator Load_CO() Returns Type Description IEnumerator"
  },
  "api/Games.GrumpyBear.Core.LevelManagement.SceneGroupColdStartInitializer.html": {
    "href": "api/Games.GrumpyBear.Core.LevelManagement.SceneGroupColdStartInitializer.html",
    "title": "Class SceneGroupColdStartInitializer | Games.GrumpyBear.Core",
    "keywords": "Class SceneGroupColdStartInitializer Inheritance Object SceneGroupColdStartInitializer Namespace : Games.GrumpyBear.Core.LevelManagement Assembly : Games.GrumpyBear.Core.dll Syntax public class SceneGroupColdStartInitializer : MonoBehaviour Properties SceneGroup Declaration public SceneGroup SceneGroup { get; } Property Value Type Description SceneGroup"
  },
  "api/Games.GrumpyBear.Core.LevelManagement.SceneLoader.html": {
    "href": "api/Games.GrumpyBear.Core.LevelManagement.SceneLoader.html",
    "title": "Class SceneLoader | Games.GrumpyBear.Core",
    "keywords": "Class SceneLoader Inheritance Object SceneLoader Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Games.GrumpyBear.Core.LevelManagement Assembly : Games.GrumpyBear.Core.dll Syntax public static class SceneLoader Methods LoadExactlyByBuildIndex(IEnumerable<Int32>, Int32) Make sure a specific set of scenes by loading and unloading scenes. Declaration public static IEnumerator LoadExactlyByBuildIndex(IEnumerable<int> buildIndices, int activeBuildIndex) Parameters Type Name Description IEnumerable < Int32 > buildIndices Int32 activeBuildIndex Returns Type Description IEnumerator LoadExactlyByScenePath(IEnumerable<String>, String) Make sure a specific set of scenes by loading and unloading scenes. Declaration public static IEnumerator LoadExactlyByScenePath(IEnumerable<string> scenePaths, string activeScenePath) Parameters Type Name Description IEnumerable < String > scenePaths String activeScenePath Returns Type Description IEnumerator LoadScenesByBuildIndex(IEnumerable<Int32>) Load scenes by build index as a coroutine. Declaration public static IEnumerator LoadScenesByBuildIndex(IEnumerable<int> buildIndices) Parameters Type Name Description IEnumerable < Int32 > buildIndices Returns Type Description IEnumerator LoadScenesByBuildIndex(IEnumerable<Int32>, Int32) Load scenes by build index and set active scene as a coroutine. Declaration public static IEnumerator LoadScenesByBuildIndex(IEnumerable<int> buildIndices, int activeBuildIndex) Parameters Type Name Description IEnumerable < Int32 > buildIndices Int32 activeBuildIndex Returns Type Description IEnumerator LoadScenesByPath(IEnumerable<String>) Load scenes by path as a coroutine. Declaration public static IEnumerator LoadScenesByPath(IEnumerable<string> scenePaths) Parameters Type Name Description IEnumerable < String > scenePaths Returns Type Description IEnumerator LoadScenesByPath(IEnumerable<String>, String) Load scenes by path and set active scene as a coroutine. Declaration public static IEnumerator LoadScenesByPath(IEnumerable<string> scenePaths, string activeScenePath) Parameters Type Name Description IEnumerable < String > scenePaths String activeScenePath Returns Type Description IEnumerator UnloadScenes(IEnumerable<Scene>) Unload scenes as a coroutine. Declaration public static IEnumerator UnloadScenes(IEnumerable<Scene> scenes) Parameters Type Name Description IEnumerable < Scene > scenes Returns Type Description IEnumerator"
  },
  "api/Games.GrumpyBear.Core.LevelManagement.SceneManager.html": {
    "href": "api/Games.GrumpyBear.Core.LevelManagement.SceneManager.html",
    "title": "Class SceneManager | Games.GrumpyBear.Core",
    "keywords": "Class SceneManager Inheritance Object SceneManager Namespace : Games.GrumpyBear.Core.LevelManagement Assembly : Games.GrumpyBear.Core.dll Syntax public class SceneManager : ScriptableObject Fields SceneGroupCurrentlyLoading Declaration public static SceneGroup SceneGroupCurrentlyLoading Field Value Type Description SceneGroup Properties GlobalScenes Declaration public IReadOnlyList<SceneReference> GlobalScenes { get; } Property Value Type Description IReadOnlyList < SceneReference > IsLoadingSceneGroup Declaration public static bool IsLoadingSceneGroup { get; } Property Value Type Description Boolean SceneGroups Declaration public IReadOnlyList<SceneGroup> SceneGroups { get; } Property Value Type Description IReadOnlyList < SceneGroup > Methods Load(SceneGroup) Declaration public void Load(SceneGroup sceneGroup) Parameters Type Name Description SceneGroup sceneGroup Load_CO(SceneGroup) Declaration public IEnumerator Load_CO(SceneGroup sceneGroup) Parameters Type Name Description SceneGroup sceneGroup Returns Type Description IEnumerator WaitForLoadingCompleted() Declaration public static IEnumerator WaitForLoadingCompleted() Returns Type Description IEnumerator Events OnSceneGroupChanged Declaration public static event Action<SceneGroup> OnSceneGroupChanged Event Type Type Description Action < SceneGroup >"
  },
  "api/Games.GrumpyBear.Core.LevelManagement.SceneManagerListener.html": {
    "href": "api/Games.GrumpyBear.Core.LevelManagement.SceneManagerListener.html",
    "title": "Class SceneManagerListener | Games.GrumpyBear.Core",
    "keywords": "Class SceneManagerListener Inheritance Object SceneManagerListener Namespace : Games.GrumpyBear.Core.LevelManagement Assembly : Games.GrumpyBear.Core.dll Syntax public class SceneManagerListener : MonoBehaviour"
  },
  "api/Games.GrumpyBear.Core.LevelManagement.SceneReference.html": {
    "href": "api/Games.GrumpyBear.Core.LevelManagement.SceneReference.html",
    "title": "Class SceneReference | Games.GrumpyBear.Core",
    "keywords": "Class SceneReference Inheritance Object SceneReference Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Games.GrumpyBear.Core.LevelManagement Assembly : Games.GrumpyBear.Core.dll Syntax public class SceneReference Properties BuildIndex Declaration public int BuildIndex { get; } Property Value Type Description Int32 Scene Declaration public Scene Scene { get; } Property Value Type Description Scene ScenePath Declaration public string ScenePath { get; } Property Value Type Description String"
  },
  "api/Games.GrumpyBear.Core.Observables.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.html",
    "title": "Namespace Games.GrumpyBear.Core.Observables | Games.GrumpyBear.Core",
    "keywords": "Namespace Games.GrumpyBear.Core.Observables Classes Observable<T> ReadOnlyObservable<T> Interfaces IObservable<T> IReadonlyObservable<T>"
  },
  "api/Games.GrumpyBear.Core.Observables.IObservable-1.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.IObservable-1.html",
    "title": "Interface IObservable<T> | Games.GrumpyBear.Core",
    "keywords": "Interface IObservable<T> Namespace : Games.GrumpyBear.Core.Observables Assembly : Games.GrumpyBear.Core.dll Syntax public interface IObservable<T> Type Parameters Name Description T Properties Value Declaration T Value { get; set; } Property Value Type Description T Methods Set(T) Declaration void Set(T value) Parameters Type Name Description T value Subscribe(Action<T>) Declaration void Subscribe(Action<T> subscriber) Parameters Type Name Description Action <T> subscriber Unsubscribe(Action<T>) Declaration void Unsubscribe(Action<T> subscriber) Parameters Type Name Description Action <T> subscriber Events OnChange Declaration event Action<T> OnChange Event Type Type Description Action <T>"
  },
  "api/Games.GrumpyBear.Core.Observables.IReadonlyObservable-1.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.IReadonlyObservable-1.html",
    "title": "Interface IReadonlyObservable<T> | Games.GrumpyBear.Core",
    "keywords": "Interface IReadonlyObservable<T> Namespace : Games.GrumpyBear.Core.Observables Assembly : Games.GrumpyBear.Core.dll Syntax public interface IReadonlyObservable<out T> Type Parameters Name Description T Properties Value Declaration T Value { get; } Property Value Type Description T Methods Subscribe(Action<T>) Declaration void Subscribe(Action<T> subscriber) Parameters Type Name Description Action <T> subscriber Unsubscribe(Action<T>) Declaration void Unsubscribe(Action<T> subscriber) Parameters Type Name Description Action <T> subscriber Events OnChange Declaration event Action<T> OnChange Event Type Type Description Action <T>"
  },
  "api/Games.GrumpyBear.Core.Observables.Observable-1.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.Observable-1.html",
    "title": "Class Observable<T> | Games.GrumpyBear.Core",
    "keywords": "Class Observable<T> Inheritance Object ReadOnlyObservable <T> Observable<T> Implements IReadonlyObservable <T> IObservable <T> Inherited Members ReadOnlyObservable<T>.OnChange ReadOnlyObservable<T>.Subscribe(Action<T>) ReadOnlyObservable<T>.Unsubscribe(Action<T>) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Games.GrumpyBear.Core.Observables Assembly : Games.GrumpyBear.Core.dll Syntax public class Observable<T> : ReadOnlyObservable<T>, IReadonlyObservable<T>, IObservable<T> Type Parameters Name Description T Properties Value Declaration public T Value { get; set; } Property Value Type Description T Methods Set(T) Declaration public void Set(T value) Parameters Type Name Description T value Implements IReadonlyObservable<T> IObservable<T>"
  },
  "api/Games.GrumpyBear.Core.Observables.ReadOnlyObservable-1.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ReadOnlyObservable-1.html",
    "title": "Class ReadOnlyObservable<T> | Games.GrumpyBear.Core",
    "keywords": "Class ReadOnlyObservable<T> Inheritance Object ReadOnlyObservable<T> Observable<T> Implements IReadonlyObservable <T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Games.GrumpyBear.Core.Observables Assembly : Games.GrumpyBear.Core.dll Syntax public class ReadOnlyObservable<T> : IReadonlyObservable<T> Type Parameters Name Description T Constructors ReadOnlyObservable() Declaration protected ReadOnlyObservable() ReadOnlyObservable(T) Declaration protected ReadOnlyObservable(T initialValue) Parameters Type Name Description T initialValue ReadOnlyObservable(T, Action<T>, Boolean) Declaration protected ReadOnlyObservable(T initialValue, Action<T> onChange, bool trigger = false) Parameters Type Name Description T initialValue Action <T> onChange Boolean trigger ReadOnlyObservable(Action<T>) Declaration protected ReadOnlyObservable(Action<T> onChange) Parameters Type Name Description Action <T> onChange Properties Value Declaration public T Value { get; protected set; } Property Value Type Description T Methods Set(T) Declaration protected void Set(T value) Parameters Type Name Description T value Subscribe(Action<T>) Declaration public void Subscribe(Action<T> subscriber) Parameters Type Name Description Action <T> subscriber Unsubscribe(Action<T>) Declaration public void Unsubscribe(Action<T> subscriber) Parameters Type Name Description Action <T> subscriber Events OnChange Declaration public event Action<T> OnChange Event Type Type Description Action <T> Operators Implicit(ReadOnlyObservable<T> to T) Declaration public static implicit operator T(ReadOnlyObservable<T> o) Parameters Type Name Description ReadOnlyObservable <T> o Returns Type Description T Implements IReadonlyObservable<T>"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.BoolObservable.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.BoolObservable.html",
    "title": "Class BoolObservable | Games.GrumpyBear.Core",
    "keywords": "Class BoolObservable Inheritance Object ReadOnlyObservable < Boolean > Observable < Boolean > BoolObservable Implements IReadonlyObservable < Boolean > IObservable < Boolean > Inherited Members Observable<Boolean>.Value Observable<Boolean>.Set(Boolean) ReadOnlyObservable<Boolean>.OnChange ReadOnlyObservable<Boolean>.Subscribe(Action<Boolean>) ReadOnlyObservable<Boolean>.Unsubscribe(Action<Boolean>) Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public class BoolObservable : Observable<bool>, IReadonlyObservable<bool>, IObservable<bool> Methods Toggle() Declaration public void Toggle() Implements IReadonlyObservable<T> IObservable<T>"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.BoolObservableListener.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.BoolObservableListener.html",
    "title": "Class BoolObservableListener | Games.GrumpyBear.Core",
    "keywords": "Class BoolObservableListener Inheritance Object ObservableListener < Boolean > BoolObservableListener Inherited Members ObservableListener<Boolean>._observable ObservableListener<Boolean>._onChange Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public class BoolObservableListener : ObservableListener<bool>"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.CameraObservable.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.CameraObservable.html",
    "title": "Class CameraObservable | Games.GrumpyBear.Core",
    "keywords": "Class CameraObservable Inheritance Object ReadOnlyObservable < Camera > Observable < Camera > CameraObservable Implements IReadonlyObservable < Camera > IObservable < Camera > Inherited Members Observable<Camera>.Value Observable<Camera>.Set(Camera) ReadOnlyObservable<Camera>.OnChange ReadOnlyObservable<Camera>.Subscribe(Action<Camera>) ReadOnlyObservable<Camera>.Unsubscribe(Action<Camera>) Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public class CameraObservable : Observable<Camera>, IReadonlyObservable<Camera>, IObservable<Camera> Implements IReadonlyObservable<T> IObservable<T>"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.CameraObservableListener.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.CameraObservableListener.html",
    "title": "Class CameraObservableListener | Games.GrumpyBear.Core",
    "keywords": "Class CameraObservableListener Inheritance Object ObservableListener < Camera > CameraObservableListener Inherited Members ObservableListener<Camera>._observable ObservableListener<Camera>._onChange Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public class CameraObservableListener : ObservableListener<Camera>"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.CameraObservableNotifier.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.CameraObservableNotifier.html",
    "title": "Class CameraObservableNotifier | Games.GrumpyBear.Core",
    "keywords": "Class CameraObservableNotifier Inheritance Object CameraObservableNotifier Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public class CameraObservableNotifier : MonoBehaviour"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.GameObjectObservable.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.GameObjectObservable.html",
    "title": "Class GameObjectObservable | Games.GrumpyBear.Core",
    "keywords": "Class GameObjectObservable Inheritance Object ReadOnlyObservable < GameObject > Observable < GameObject > GameObjectObservable Implements IReadonlyObservable < GameObject > IObservable < GameObject > Inherited Members Observable<GameObject>.Value Observable<GameObject>.Set(GameObject) ReadOnlyObservable<GameObject>.OnChange ReadOnlyObservable<GameObject>.Subscribe(Action<GameObject>) ReadOnlyObservable<GameObject>.Unsubscribe(Action<GameObject>) Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public class GameObjectObservable : Observable<GameObject>, IReadonlyObservable<GameObject>, IObservable<GameObject> Implements IReadonlyObservable<T> IObservable<T>"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.GameObjectObservableListener.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.GameObjectObservableListener.html",
    "title": "Class GameObjectObservableListener | Games.GrumpyBear.Core",
    "keywords": "Class GameObjectObservableListener Inheritance Object ObservableListener < GameObject > GameObjectObservableListener Inherited Members ObservableListener<GameObject>._observable ObservableListener<GameObject>._onChange Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public class GameObjectObservableListener : ObservableListener<GameObject>"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.GameObjectObservableNotifier.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.GameObjectObservableNotifier.html",
    "title": "Class GameObjectObservableNotifier | Games.GrumpyBear.Core",
    "keywords": "Class GameObjectObservableNotifier Inheritance Object GameObjectObservableNotifier Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public class GameObjectObservableNotifier : MonoBehaviour"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.GlobalStateT-1.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.GlobalStateT-1.html",
    "title": "Class GlobalStateT<T> | Games.GrumpyBear.Core",
    "keywords": "Class GlobalStateT<T> Inheritance Object GlobalStateT<T> Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public abstract class GlobalStateT<T> : SerializableScriptableObject<T> where T : GlobalStateT<T> Type Parameters Name Description T Properties Current Declaration public static T Current { get; } Property Value Type Description T IsActive Declaration public bool IsActive { get; } Property Value Type Description Boolean Methods SetActive() Declaration public void SetActive() Subscribe(Action<T>) Declaration public static void Subscribe(Action<T> subscriber) Parameters Type Name Description Action <T> subscriber Unsubscribe(Action<T>) Declaration public static void Unsubscribe(Action<T> subscriber) Parameters Type Name Description Action <T> subscriber Events OnEnter Declaration public event Action OnEnter Event Type Type Description Action OnLeave Declaration public event Action OnLeave Event Type Type Description Action"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.html",
    "title": "Namespace Games.GrumpyBear.Core.Observables.ScriptableObjects | Games.GrumpyBear.Core",
    "keywords": "Namespace Games.GrumpyBear.Core.Observables.ScriptableObjects Classes BoolObservable BoolObservableListener CameraObservable CameraObservableListener CameraObservableNotifier GameObjectObservable GameObjectObservableListener GameObjectObservableNotifier GlobalStateT<T> IntObservable IntObservableListener Observable<T> ObservableListener<T> ReadOnlyObservable<T> RuntimeSet RuntimeSetMember Enums ReadOnlyObservable<T>.NotificationOrder"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.IntObservable.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.IntObservable.html",
    "title": "Class IntObservable | Games.GrumpyBear.Core",
    "keywords": "Class IntObservable Inheritance Object ReadOnlyObservable < Int32 > Observable < Int32 > IntObservable Implements IReadonlyObservable < Int32 > IObservable < Int32 > Inherited Members Observable<Int32>.Value Observable<Int32>.Set(Int32) ReadOnlyObservable<Int32>.OnChange ReadOnlyObservable<Int32>.Subscribe(Action<Int32>) ReadOnlyObservable<Int32>.Unsubscribe(Action<Int32>) Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public class IntObservable : Observable<int>, IReadonlyObservable<int>, IObservable<int> Methods Add(Int32) Declaration public void Add(int x) Parameters Type Name Description Int32 x Decrement() Declaration public void Decrement() Increment() Declaration public void Increment() Implements IReadonlyObservable<T> IObservable<T>"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.IntObservableListener.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.IntObservableListener.html",
    "title": "Class IntObservableListener | Games.GrumpyBear.Core",
    "keywords": "Class IntObservableListener Inheritance Object ObservableListener < Int32 > IntObservableListener Inherited Members ObservableListener<Int32>._observable ObservableListener<Int32>._onChange Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public class IntObservableListener : ObservableListener<int>"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.Observable-1.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.Observable-1.html",
    "title": "Class Observable<T> | Games.GrumpyBear.Core",
    "keywords": "Class Observable<T> Inheritance Object ReadOnlyObservable <T> Observable<T> BoolObservable CameraObservable GameObjectObservable IntObservable Implements IReadonlyObservable <T> IObservable <T> Inherited Members ReadOnlyObservable<T>.OnChange ReadOnlyObservable<T>.Subscribe(Action<T>) ReadOnlyObservable<T>.Unsubscribe(Action<T>) Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public class Observable<T> : ReadOnlyObservable<T>, IReadonlyObservable<T>, IObservable<T> Type Parameters Name Description T Properties Value Declaration public T Value { get; set; } Property Value Type Description T Methods Set(T) Declaration public void Set(T value) Parameters Type Name Description T value Implements IReadonlyObservable<T> IObservable<T>"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.ObservableListener-1.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.ObservableListener-1.html",
    "title": "Class ObservableListener<T> | Games.GrumpyBear.Core",
    "keywords": "Class ObservableListener<T> Inheritance Object ObservableListener<T> BoolObservableListener CameraObservableListener GameObjectObservableListener IntObservableListener Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public class ObservableListener<T> : MonoBehaviour Type Parameters Name Description T Fields _observable Declaration protected Observable<T> _observable Field Value Type Description Observable <T> _onChange Declaration protected UnityEvent<T> _onChange Field Value Type Description UnityEvent <T>"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.ReadOnlyObservable-1.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.ReadOnlyObservable-1.html",
    "title": "Class ReadOnlyObservable<T> | Games.GrumpyBear.Core",
    "keywords": "Class ReadOnlyObservable<T> Inheritance Object ReadOnlyObservable<T> Observable<T> RuntimeSet Implements IReadonlyObservable <T> Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public class ReadOnlyObservable<T> : ScriptableObject, IReadonlyObservable<T> Type Parameters Name Description T Properties Value Declaration public T Value { get; protected set; } Property Value Type Description T Methods Set(T) Declaration protected void Set(T value) Parameters Type Name Description T value Subscribe(Action<T>) Declaration public void Subscribe(Action<T> subscriber) Parameters Type Name Description Action <T> subscriber Unsubscribe(Action<T>) Declaration public void Unsubscribe(Action<T> subscriber) Parameters Type Name Description Action <T> subscriber Events OnChange Declaration public event Action<T> OnChange Event Type Type Description Action <T> Operators Implicit(ReadOnlyObservable<T> to T) Declaration public static implicit operator T(ReadOnlyObservable<T> o) Parameters Type Name Description ReadOnlyObservable <T> o Returns Type Description T Implements IReadonlyObservable<T>"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.ReadOnlyObservable-1.NotificationOrder.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.ReadOnlyObservable-1.NotificationOrder.html",
    "title": "Enum ReadOnlyObservable<T>.NotificationOrder | Games.GrumpyBear.Core",
    "keywords": "Enum ReadOnlyObservable<T>.NotificationOrder Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public enum NotificationOrder Fields Name Description ScriptsBeforeUnityEvents UnityEventsBeforeScripts"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.RuntimeSet.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.RuntimeSet.html",
    "title": "Class RuntimeSet | Games.GrumpyBear.Core",
    "keywords": "Class RuntimeSet Inheritance Object ReadOnlyObservable < Int32 > RuntimeSet Implements IReadonlyObservable < Int32 > Inherited Members ReadOnlyObservable<Int32>.OnChange ReadOnlyObservable<Int32>.Value ReadOnlyObservable<Int32>.Set(Int32) ReadOnlyObservable<Int32>.Subscribe(Action<Int32>) ReadOnlyObservable<Int32>.Unsubscribe(Action<Int32>) Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public class RuntimeSet : ReadOnlyObservable<int>, IReadonlyObservable<int> Methods Register(GameObject) Declaration public void Register(GameObject instance) Parameters Type Name Description GameObject instance Unregister(GameObject) Declaration public void Unregister(GameObject instance) Parameters Type Name Description GameObject instance Implements IReadonlyObservable<T>"
  },
  "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.RuntimeSetMember.html": {
    "href": "api/Games.GrumpyBear.Core.Observables.ScriptableObjects.RuntimeSetMember.html",
    "title": "Class RuntimeSetMember | Games.GrumpyBear.Core",
    "keywords": "Class RuntimeSetMember Inheritance Object RuntimeSetMember Namespace : Games.GrumpyBear.Core.Observables.ScriptableObjects Assembly : Games.GrumpyBear.Core.dll Syntax public class RuntimeSetMember : MonoBehaviour"
  },
  "api/Games.GrumpyBear.Core.SaveSystem.FileSystem.html": {
    "href": "api/Games.GrumpyBear.Core.SaveSystem.FileSystem.html",
    "title": "Class FileSystem | Games.GrumpyBear.Core",
    "keywords": "Class FileSystem Inheritance Object FileSystem Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ToString() Object.ReferenceEquals(Object, Object) Namespace : Games.GrumpyBear.Core.SaveSystem Assembly : Games.GrumpyBear.Core.dll Syntax public static class FileSystem Methods Delete(String) Declaration public static void Delete(string saveFile) Parameters Type Name Description String saveFile Exists(String) Declaration public static bool Exists(string saveFile) Parameters Type Name Description String saveFile Returns Type Description Boolean LoadFile<T>(String) Declaration public static T LoadFile<T>(string saveFile) where T : class Parameters Type Name Description String saveFile Returns Type Description T Type Parameters Name Description T SaveFile(String, Object) Declaration public static void SaveFile(string saveFile, object state) Parameters Type Name Description String saveFile Object state"
  },
  "api/Games.GrumpyBear.Core.SaveSystem.html": {
    "href": "api/Games.GrumpyBear.Core.SaveSystem.html",
    "title": "Namespace Games.GrumpyBear.Core.SaveSystem | Games.GrumpyBear.Core",
    "keywords": "Namespace Games.GrumpyBear.Core.SaveSystem Classes FileSystem ObjectGuid SaveableEntity SerializableScriptableObject<T> Vector3Surrogate Interfaces ISaveableComponent"
  },
  "api/Games.GrumpyBear.Core.SaveSystem.ISaveableComponent.html": {
    "href": "api/Games.GrumpyBear.Core.SaveSystem.ISaveableComponent.html",
    "title": "Interface ISaveableComponent | Games.GrumpyBear.Core",
    "keywords": "Interface ISaveableComponent Namespace : Games.GrumpyBear.Core.SaveSystem Assembly : Games.GrumpyBear.Core.dll Syntax public interface ISaveableComponent Methods CaptureState() Declaration object CaptureState() Returns Type Description Object RestoreState(Object) Declaration void RestoreState(object state) Parameters Type Name Description Object state"
  },
  "api/Games.GrumpyBear.Core.SaveSystem.ObjectGuid.html": {
    "href": "api/Games.GrumpyBear.Core.SaveSystem.ObjectGuid.html",
    "title": "Class ObjectGuid | Games.GrumpyBear.Core",
    "keywords": "Class ObjectGuid Inheritance Object ObjectGuid Namespace : Games.GrumpyBear.Core.SaveSystem Assembly : Games.GrumpyBear.Core.dll Syntax public sealed class ObjectGuid : IEquatable<ObjectGuid> Constructors ObjectGuid() Declaration public ObjectGuid() ObjectGuid(Guid, Int64) Declaration public ObjectGuid(Guid guid, long localId) Parameters Type Name Description Guid guid Int64 localId ObjectGuid(ref Byte[]) Declaration public ObjectGuid(ref byte[] bytes) Parameters Type Name Description Byte [] bytes ObjectGuid(ref Byte[], Guid, Int64) Declaration public ObjectGuid(ref byte[] bytes, Guid guid, long localId) Parameters Type Name Description Byte [] bytes Guid guid Int64 localId ObjectGuid(ref Byte[], String, Int64) Declaration public ObjectGuid(ref byte[] bytes, string guid, long localId) Parameters Type Name Description Byte [] bytes String guid Int64 localId ObjectGuid(String, Int64) Declaration public ObjectGuid(string guid, long localId) Parameters Type Name Description String guid Int64 localId Properties Bytes Declaration public ReadOnlySpan<byte> Bytes { get; } Property Value Type Description ReadOnlySpan < Byte > Guid Declaration public Guid Guid { get; set; } Property Value Type Description Guid LocalId Declaration public long LocalId { get; set; } Property Value Type Description Int64 Methods Equals(ObjectGuid) Declaration public bool Equals(ObjectGuid other) Parameters Type Name Description ObjectGuid other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(ObjectGuid, ObjectGuid) Declaration public static bool operator ==(ObjectGuid a, ObjectGuid b) Parameters Type Name Description ObjectGuid a ObjectGuid b Returns Type Description Boolean Inequality(ObjectGuid, ObjectGuid) Declaration public static bool operator !=(ObjectGuid a, ObjectGuid b) Parameters Type Name Description ObjectGuid a ObjectGuid b Returns Type Description Boolean"
  },
  "api/Games.GrumpyBear.Core.SaveSystem.SaveableEntity.html": {
    "href": "api/Games.GrumpyBear.Core.SaveSystem.SaveableEntity.html",
    "title": "Class SaveableEntity | Games.GrumpyBear.Core",
    "keywords": "Class SaveableEntity Inheritance Object SaveableEntity Namespace : Games.GrumpyBear.Core.SaveSystem Assembly : Games.GrumpyBear.Core.dll Syntax public class SaveableEntity : MonoBehaviour Methods CaptureEntityStates(Dictionary<String, Dictionary<String, Object>>) Declaration public static void CaptureEntityStates(Dictionary<string, Dictionary<string, object>> state) Parameters Type Name Description Dictionary < String , Dictionary < String , Object >> state RestoreEntityStates(Dictionary<String, Dictionary<String, Object>>) Declaration public static void RestoreEntityStates(Dictionary<string, Dictionary<string, object>> state) Parameters Type Name Description Dictionary < String , Dictionary < String , Object >> state"
  },
  "api/Games.GrumpyBear.Core.SaveSystem.SerializableScriptableObject-1.html": {
    "href": "api/Games.GrumpyBear.Core.SaveSystem.SerializableScriptableObject-1.html",
    "title": "Class SerializableScriptableObject<T> | Games.GrumpyBear.Core",
    "keywords": "Class SerializableScriptableObject<T> Inheritance Object SerializableScriptableObject<T> Namespace : Games.GrumpyBear.Core.SaveSystem Assembly : Games.GrumpyBear.Core.dll Syntax public abstract class SerializableScriptableObject<T> : ScriptableObject where T : SerializableScriptableObject<T> Type Parameters Name Description T Properties ObjectGuid Declaration public ObjectGuid ObjectGuid { get; } Property Value Type Description ObjectGuid Methods GetByGuid(ObjectGuid) Declaration public static T GetByGuid(ObjectGuid guid) Parameters Type Name Description ObjectGuid guid Returns Type Description T"
  },
  "api/Games.GrumpyBear.Core.SaveSystem.Vector3Surrogate.html": {
    "href": "api/Games.GrumpyBear.Core.SaveSystem.Vector3Surrogate.html",
    "title": "Class Vector3Surrogate | Games.GrumpyBear.Core",
    "keywords": "Class Vector3Surrogate Inheritance Object Vector3Surrogate Namespace : Games.GrumpyBear.Core.SaveSystem Assembly : Games.GrumpyBear.Core.dll Syntax public class Vector3Surrogate : ISerializationSurrogate Methods GetObjectData(Object, SerializationInfo, StreamingContext) Declaration public void GetObjectData(object obj, SerializationInfo info, StreamingContext context) Parameters Type Name Description Object obj SerializationInfo info StreamingContext context SetObjectData(Object, SerializationInfo, StreamingContext, ISurrogateSelector) Declaration public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector) Parameters Type Name Description Object obj SerializationInfo info StreamingContext context ISurrogateSelector selector Returns Type Description Object"
  },
  "api/Games.GrumpyBear.Core.Settings.html": {
    "href": "api/Games.GrumpyBear.Core.Settings.html",
    "title": "Namespace Games.GrumpyBear.Core.Settings | Games.GrumpyBear.Core",
    "keywords": "Namespace Games.GrumpyBear.Core.Settings Classes VideoSettings VideoSettings.ResolutionEntry"
  },
  "api/Games.GrumpyBear.Core.Settings.UIElements.FullscreenToggle.html": {
    "href": "api/Games.GrumpyBear.Core.Settings.UIElements.FullscreenToggle.html",
    "title": "Class FullscreenToggle | Games.GrumpyBear.Core",
    "keywords": "Class FullscreenToggle Inheritance Object VideoSettingsControl FullscreenToggle Inherited Members VideoSettingsControl.VideoSettings Namespace : Games.GrumpyBear.Core.Settings.UIElements Assembly : Games.GrumpyBear.Core.dll Syntax public sealed class FullscreenToggle : VideoSettingsControl Constructors FullscreenToggle() Declaration public FullscreenToggle() Properties label Declaration public string label { get; set; } Property Value Type Description String text Declaration public string text { get; set; } Property Value Type Description String Methods UpdateUI() Declaration protected override void UpdateUI() Overrides VideoSettingsControl.UpdateUI()"
  },
  "api/Games.GrumpyBear.Core.Settings.UIElements.FullscreenToggle.UxmlFactory.html": {
    "href": "api/Games.GrumpyBear.Core.Settings.UIElements.FullscreenToggle.UxmlFactory.html",
    "title": "Class FullscreenToggle.UxmlFactory | Games.GrumpyBear.Core",
    "keywords": "Class FullscreenToggle.UxmlFactory Inheritance Object FullscreenToggle.UxmlFactory Namespace : Games.GrumpyBear.Core.Settings.UIElements Assembly : Games.GrumpyBear.Core.dll Syntax public class UxmlFactory : FullscreenToggle.UxmlFactory<FullscreenToggle, FullscreenToggle.UxmlTraits>"
  },
  "api/Games.GrumpyBear.Core.Settings.UIElements.FullscreenToggle.UxmlTraits.html": {
    "href": "api/Games.GrumpyBear.Core.Settings.UIElements.FullscreenToggle.UxmlTraits.html",
    "title": "Class FullscreenToggle.UxmlTraits | Games.GrumpyBear.Core",
    "keywords": "Class FullscreenToggle.UxmlTraits Inheritance Object FullscreenToggle.UxmlTraits Namespace : Games.GrumpyBear.Core.Settings.UIElements Assembly : Games.GrumpyBear.Core.dll Syntax public class UxmlTraits : VisualElement.UxmlTraits Methods Init(VisualElement, IUxmlAttributes, CreationContext) Declaration public override void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc) Parameters Type Name Description VisualElement ve IUxmlAttributes bag CreationContext cc"
  },
  "api/Games.GrumpyBear.Core.Settings.UIElements.html": {
    "href": "api/Games.GrumpyBear.Core.Settings.UIElements.html",
    "title": "Namespace Games.GrumpyBear.Core.Settings.UIElements | Games.GrumpyBear.Core",
    "keywords": "Namespace Games.GrumpyBear.Core.Settings.UIElements Classes FullscreenToggle FullscreenToggle.UxmlFactory FullscreenToggle.UxmlTraits QualityDropdown QualityDropdown.UxmlFactory QualityDropdown.UxmlTraits ResolutionDropdown ResolutionDropdown.UxmlFactory ResolutionDropdown.UxmlTraits VideoSettingsControl"
  },
  "api/Games.GrumpyBear.Core.Settings.UIElements.QualityDropdown.html": {
    "href": "api/Games.GrumpyBear.Core.Settings.UIElements.QualityDropdown.html",
    "title": "Class QualityDropdown | Games.GrumpyBear.Core",
    "keywords": "Class QualityDropdown Inheritance Object VideoSettingsControl QualityDropdown Inherited Members VideoSettingsControl.VideoSettings Namespace : Games.GrumpyBear.Core.Settings.UIElements Assembly : Games.GrumpyBear.Core.dll Syntax public sealed class QualityDropdown : VideoSettingsControl Constructors QualityDropdown() Declaration public QualityDropdown() Properties label Declaration public string label { get; set; } Property Value Type Description String Methods UpdateUI() Declaration protected override void UpdateUI() Overrides VideoSettingsControl.UpdateUI()"
  },
  "api/Games.GrumpyBear.Core.Settings.UIElements.QualityDropdown.UxmlFactory.html": {
    "href": "api/Games.GrumpyBear.Core.Settings.UIElements.QualityDropdown.UxmlFactory.html",
    "title": "Class QualityDropdown.UxmlFactory | Games.GrumpyBear.Core",
    "keywords": "Class QualityDropdown.UxmlFactory Inheritance Object QualityDropdown.UxmlFactory Namespace : Games.GrumpyBear.Core.Settings.UIElements Assembly : Games.GrumpyBear.Core.dll Syntax public class UxmlFactory : QualityDropdown.UxmlFactory<QualityDropdown, QualityDropdown.UxmlTraits>"
  },
  "api/Games.GrumpyBear.Core.Settings.UIElements.QualityDropdown.UxmlTraits.html": {
    "href": "api/Games.GrumpyBear.Core.Settings.UIElements.QualityDropdown.UxmlTraits.html",
    "title": "Class QualityDropdown.UxmlTraits | Games.GrumpyBear.Core",
    "keywords": "Class QualityDropdown.UxmlTraits Inheritance Object QualityDropdown.UxmlTraits Namespace : Games.GrumpyBear.Core.Settings.UIElements Assembly : Games.GrumpyBear.Core.dll Syntax public class UxmlTraits : VisualElement.UxmlTraits Methods Init(VisualElement, IUxmlAttributes, CreationContext) Declaration public override void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc) Parameters Type Name Description VisualElement ve IUxmlAttributes bag CreationContext cc"
  },
  "api/Games.GrumpyBear.Core.Settings.UIElements.ResolutionDropdown.html": {
    "href": "api/Games.GrumpyBear.Core.Settings.UIElements.ResolutionDropdown.html",
    "title": "Class ResolutionDropdown | Games.GrumpyBear.Core",
    "keywords": "Class ResolutionDropdown Inheritance Object VideoSettingsControl ResolutionDropdown Inherited Members VideoSettingsControl.VideoSettings Namespace : Games.GrumpyBear.Core.Settings.UIElements Assembly : Games.GrumpyBear.Core.dll Syntax public sealed class ResolutionDropdown : VideoSettingsControl Constructors ResolutionDropdown() Declaration public ResolutionDropdown() Properties label Declaration public string label { get; set; } Property Value Type Description String Methods UpdateUI() Declaration protected override void UpdateUI() Overrides VideoSettingsControl.UpdateUI()"
  },
  "api/Games.GrumpyBear.Core.Settings.UIElements.ResolutionDropdown.UxmlFactory.html": {
    "href": "api/Games.GrumpyBear.Core.Settings.UIElements.ResolutionDropdown.UxmlFactory.html",
    "title": "Class ResolutionDropdown.UxmlFactory | Games.GrumpyBear.Core",
    "keywords": "Class ResolutionDropdown.UxmlFactory Inheritance Object ResolutionDropdown.UxmlFactory Namespace : Games.GrumpyBear.Core.Settings.UIElements Assembly : Games.GrumpyBear.Core.dll Syntax public class UxmlFactory : ResolutionDropdown.UxmlFactory<ResolutionDropdown, ResolutionDropdown.UxmlTraits>"
  },
  "api/Games.GrumpyBear.Core.Settings.UIElements.ResolutionDropdown.UxmlTraits.html": {
    "href": "api/Games.GrumpyBear.Core.Settings.UIElements.ResolutionDropdown.UxmlTraits.html",
    "title": "Class ResolutionDropdown.UxmlTraits | Games.GrumpyBear.Core",
    "keywords": "Class ResolutionDropdown.UxmlTraits Inheritance Object ResolutionDropdown.UxmlTraits Namespace : Games.GrumpyBear.Core.Settings.UIElements Assembly : Games.GrumpyBear.Core.dll Syntax public class UxmlTraits : VisualElement.UxmlTraits Methods Init(VisualElement, IUxmlAttributes, CreationContext) Declaration public override void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc) Parameters Type Name Description VisualElement ve IUxmlAttributes bag CreationContext cc"
  },
  "api/Games.GrumpyBear.Core.Settings.UIElements.VideoSettingsControl.html": {
    "href": "api/Games.GrumpyBear.Core.Settings.UIElements.VideoSettingsControl.html",
    "title": "Class VideoSettingsControl | Games.GrumpyBear.Core",
    "keywords": "Class VideoSettingsControl Inheritance Object VideoSettingsControl FullscreenToggle QualityDropdown ResolutionDropdown Namespace : Games.GrumpyBear.Core.Settings.UIElements Assembly : Games.GrumpyBear.Core.dll Syntax public abstract class VideoSettingsControl : VisualElement Properties VideoSettings Declaration public VideoSettings VideoSettings { get; set; } Property Value Type Description VideoSettings Methods UpdateUI() Declaration protected abstract void UpdateUI()"
  },
  "api/Games.GrumpyBear.Core.Settings.VideoSettings.html": {
    "href": "api/Games.GrumpyBear.Core.Settings.VideoSettings.html",
    "title": "Class VideoSettings | Games.GrumpyBear.Core",
    "keywords": "Class VideoSettings Inheritance Object VideoSettings Namespace : Games.GrumpyBear.Core.Settings Assembly : Games.GrumpyBear.Core.dll Syntax public class VideoSettings : ScriptableObject Properties Fullscreen Declaration public bool Fullscreen { get; set; } Property Value Type Description Boolean FullscreenSettingsKey Declaration public string FullscreenSettingsKey { get; } Property Value Type Description String QualityIndex Declaration public int QualityIndex { get; set; } Property Value Type Description Int32 QualityIndexSettingsKey Declaration public string QualityIndexSettingsKey { get; } Property Value Type Description String QualityNames Declaration public static List<string> QualityNames { get; } Property Value Type Description List < String > Resolution Declaration public VideoSettings.ResolutionEntry Resolution { get; set; } Property Value Type Description VideoSettings.ResolutionEntry ResolutionIndexSettingsKey Declaration public string ResolutionIndexSettingsKey { get; } Property Value Type Description String Resolutions Declaration public static List<VideoSettings.ResolutionEntry> Resolutions { get; } Property Value Type Description List < VideoSettings.ResolutionEntry > Methods ClearPlayerPrefs() Declaration public void ClearPlayerPrefs()"
  },
  "api/Games.GrumpyBear.Core.Settings.VideoSettings.ResolutionEntry.html": {
    "href": "api/Games.GrumpyBear.Core.Settings.VideoSettings.ResolutionEntry.html",
    "title": "Class VideoSettings.ResolutionEntry | Games.GrumpyBear.Core",
    "keywords": "Class VideoSettings.ResolutionEntry Inheritance Object VideoSettings.ResolutionEntry Namespace : Games.GrumpyBear.Core.Settings Assembly : Games.GrumpyBear.Core.dll Syntax public class ResolutionEntry : IComparable<VideoSettings.ResolutionEntry> Fields Height Declaration public readonly int Height Field Value Type Description Int32 Width Declaration public readonly int Width Field Value Type Description Int32 Methods CompareTo(VideoSettings.ResolutionEntry) Declaration public int CompareTo(VideoSettings.ResolutionEntry other) Parameters Type Name Description VideoSettings.ResolutionEntry other Returns Type Description Int32 Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description Object other Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(VideoSettings.ResolutionEntry, VideoSettings.ResolutionEntry) Declaration public static bool operator ==(VideoSettings.ResolutionEntry a, VideoSettings.ResolutionEntry b) Parameters Type Name Description VideoSettings.ResolutionEntry a VideoSettings.ResolutionEntry b Returns Type Description Boolean Inequality(VideoSettings.ResolutionEntry, VideoSettings.ResolutionEntry) Declaration public static bool operator !=(VideoSettings.ResolutionEntry a, VideoSettings.ResolutionEntry b) Parameters Type Name Description VideoSettings.ResolutionEntry a VideoSettings.ResolutionEntry b Returns Type Description Boolean"
  },
  "api/Games.GrumpyBear.Core.Triggers.html": {
    "href": "api/Games.GrumpyBear.Core.Triggers.html",
    "title": "Namespace Games.GrumpyBear.Core.Triggers | Games.GrumpyBear.Core",
    "keywords": "Namespace Games.GrumpyBear.Core.Triggers Classes Trigger2D Trigger3D"
  },
  "api/Games.GrumpyBear.Core.Triggers.Trigger2D.html": {
    "href": "api/Games.GrumpyBear.Core.Triggers.Trigger2D.html",
    "title": "Class Trigger2D | Games.GrumpyBear.Core",
    "keywords": "Class Trigger2D Inheritance Object Trigger2D Namespace : Games.GrumpyBear.Core.Triggers Assembly : Games.GrumpyBear.Core.dll Syntax public class Trigger2D : MonoBehaviour"
  },
  "api/Games.GrumpyBear.Core.Triggers.Trigger3D.html": {
    "href": "api/Games.GrumpyBear.Core.Triggers.Trigger3D.html",
    "title": "Class Trigger3D | Games.GrumpyBear.Core",
    "keywords": "Class Trigger3D Inheritance Object Trigger3D Namespace : Games.GrumpyBear.Core.Triggers Assembly : Games.GrumpyBear.Core.dll Syntax public class Trigger3D : MonoBehaviour"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Games.GrumpyBear.Core",
    "keywords": "Changelog 0.1.2 [bugfix] Fix SerializableScriptableObject initialization 0.1.1 Make SaveSystem.FileSystem more generic Make GlobalStateT inherit from SerializableScriptableObject [bugfix] Stop SaveSystem.SaveableEntry from needlessly regenerate IDs [bugfix] Hide ObjectID field in SaveSystem.SerializableScriptableObject from inspector [bugfix] Fix ObjectGuid.operator== when both sides are null 0.1.0 This release contains many changes (some of them incomplete), so don't upgrade if you strictly depend on old behavior. Please make special note of the breaking changes. Known problems A lot of this package is still undocumented. New features Added Observables.ScriptableObjects.GlobalStateT. This class is useful for situations, where you need a global (singleton) enum-like state, e.g. the game state. Added SaveSystem. This is a collection of classes useful for building a custom save system from. Migrated GrumpyBearGames.LevelManagement into this package. All editors rewritten using UI Toolkit This package now supports optional experimental features. Experimental features are enable under Tools/Core Game Utilities/Package Settings Breaking changes This release drops support for the old IMGUI system and goes all in on UI Elements. There is currently no way to automatically migrate from GrumpyBearGames.LevelManagement to GrumpyBearGames.Core.LevelManagement. This needs to be done manually. This package now requires Unity 2022.2.1f1 or newer. Bug fixes LevelManagement.SceneGroupColdStartInitializer will refuse to load a scene group, if it's not part of it. This was a bug inherited from GrumpyBearGames.LevelManagement (Experimental) SceneReferences will no longer loose track of scenes, if you move or rename them inside the editor . Moving or renaming scenes outside the editor will still break the reference. Note that this is an experimental features, which needs to be explicitly enabled. Scene Groups are now implemented using SerializableScriptableObject, so you can save and load a reference to them. 0.0.1 Initial version. This is very much work in progress."
  },
  "index.html": {
    "href": "index.html",
    "title": "Core | Games.GrumpyBear.Core",
    "keywords": "Core"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| Games.GrumpyBear.Core",
    "keywords": "Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
  }
}